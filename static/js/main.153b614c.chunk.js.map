{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","getButtonColor","sortField","thisSortField","App","useState","NONE","setSortField","reverseField","setReverseField","visibleGoods","goods","sortReverse","preparedGoods","SORT_FIELD_ALPHABET","sort","good1","good2","localeCompare","SORT_FIELD_LENGTH","length","reverse","getSortedElements","className","onClick","type","classNames","SORT_FIELD_REVERSE","ifReversed","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAmBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAwCF,SAASC,EAAeC,EAAqBC,GAC3C,OAAOD,IAAcC,G,SAtClBJ,K,+BAAAA,E,2BAAAA,E,6BAAAA,E,SAAAA,M,KA+CE,IAAMK,EAAgB,WAC3B,MAAkCC,mBAAmBN,EAASO,MAA9D,mBAAOJ,EAAP,KAAkBK,EAAlB,KACA,EAAwCF,mBAAmBN,EAASO,MAApE,mBAAOE,EAAP,KAAqBC,EAArB,KACMC,EA3CR,SACEC,EACAT,EACAU,GAEA,IAAIC,EAAa,YAAOF,GAExB,GAAIT,EACF,OAAQA,GACN,KAAKH,EAASe,oBACZD,EAAgBA,EACbE,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAME,cAAcD,MAC9C,MAEF,KAAKlB,EAASoB,kBACZN,EAAgBA,EACbE,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMI,OAASH,EAAMG,UAC/C,MACF,QACE,OAAOP,EAQb,OAJID,IACFC,EAAgBA,EAAcQ,WAGzBR,EAgBcS,CAAkBtB,EACrCE,EAAWM,GAEb,OACE,sBAAKe,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,kBAAMjB,EAAaR,EAASe,sBACrCW,KAAK,SACLF,UAAWG,IACT,SAAU,UACV,CACE,WAAYzB,EACVC,EACAH,EAASe,uBARjB,iCAgBA,wBACEU,QAAS,kBAAMjB,EAAaR,EAASoB,oBACrCM,KAAK,SACLF,UAAWG,IACT,SAAU,aACV,CACE,WAAYzB,EAAeC,EAAWH,EAASoB,qBANrD,4BAaA,wBACEK,QAAS,kBAAMf,EA7CzB,SAAoBD,GAClB,OAAQA,EAEJT,EAASO,KADTP,EAAS4B,mBA2C0BC,CAAWpB,KAC1CiB,KAAK,SACLF,UAAWG,IACT,SAAU,aACV,CACE,WAAYzB,EACVO,EACAT,EAAS4B,sBARjB,sBAqBEzB,GAAaM,IACb,wBACEgB,QAAS,WACPjB,EAAaR,EAASO,MACtBG,EAAgBV,EAASO,OAE3BmB,KAAK,SACLF,UAAU,4BANZ,sBAaJ,6BACGb,EAAamB,KAAI,SAACC,GAAD,OAChB,oBAEE,UAAQ,OAFV,SAIGA,GAHIA,YC3IjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.153b614c.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React, { useState } from 'react';\n\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  SORT_FIELD_ALPHABET = 'alphabet',\n  SORT_FIELD_LENGTH = 'length',\n  SORT_FIELD_REVERSE = 'reverse',\n  NONE = '',\n}\n\nfunction getSortedElements(\n  goods: string[],\n  sortField: SortType,\n  sortReverse: SortType,\n) {\n  let preparedGoods = [...goods];\n\n  if (sortField) {\n    switch (sortField) {\n      case SortType.SORT_FIELD_ALPHABET:\n        preparedGoods = preparedGoods\n          .sort((good1, good2) => good1.localeCompare(good2));\n        break;\n\n      case SortType.SORT_FIELD_LENGTH:\n        preparedGoods = preparedGoods\n          .sort((good1, good2) => good1.length - good2.length);\n        break;\n      default:\n        return preparedGoods;\n    }\n  }\n\n  if (sortReverse) {\n    preparedGoods = preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nfunction getButtonColor(sortField: SortType, thisSortField: SortType) {\n  return sortField !== thisSortField;\n}\n\nfunction ifReversed(reverseField: SortType) {\n  return !reverseField\n    ? SortType.SORT_FIELD_REVERSE\n    : SortType.NONE;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState<SortType>(SortType.NONE);\n  const [reverseField, setReverseField] = useState<SortType>(SortType.NONE);\n  const visibleGoods = getSortedElements(goodsFromServer,\n    sortField, reverseField);\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => setSortField(SortType.SORT_FIELD_ALPHABET)}\n          type=\"button\"\n          className={classNames(\n            'button', 'is-info',\n            {\n              'is-light': getButtonColor(\n                sortField,\n                SortType.SORT_FIELD_ALPHABET,\n              ),\n            },\n          )}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => setSortField(SortType.SORT_FIELD_LENGTH)}\n          type=\"button\"\n          className={classNames(\n            'button', 'is-success',\n            {\n              'is-light': getButtonColor(sortField, SortType.SORT_FIELD_LENGTH),\n            },\n          )}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={() => setReverseField(ifReversed(reverseField))}\n          type=\"button\"\n          className={classNames(\n            'button', 'is-warning',\n            {\n              'is-light': getButtonColor(\n                reverseField,\n                SortType.SORT_FIELD_REVERSE,\n              ),\n            },\n          )}\n        >\n          Reverse\n        </button>\n        {/*\n        Button reset shouldnt be visible if sorting and reversing aren't used.\n        So we should check, if fields have default value '' (empty string).\n        If its true, Reset button is useless, so it should be invisible.\n        In the other way, when at least one field have new value, we should render \"Reset\"\n        */}\n        {(sortField || reverseField) && (\n          <button\n            onClick={() => {\n              setSortField(SortType.NONE);\n              setReverseField(SortType.NONE);\n            }}\n            type=\"button\"\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map((good: string) => (\n          <li\n            key={good}\n            data-cy=\"Good\"\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}